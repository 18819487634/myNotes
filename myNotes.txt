1.把文件推到git仓库的步骤：
    1>在git上创建一个新的仓库
    2>在本地git bash 执行git init  （会多一个.git的文件夹，Git用它来跟踪和管理版本库）
    3>git add .     把本地文件提交变成待推送状态
    4>执行git remote add origin https://github.com//18819487634/仓库名.git   把待推送文件和远程的git仓库联系在一起
    5>git push -u origin master     推送到git仓库的master分支(即主分支)。也可以通过sourceTree(版本管理工具)将本地文件推到git仓库即可

2.给父元素声明<div class="background" :style="{ minHeight: minHeight}"></div>     //第一层div
    data () {
        return {
            minHeight: document.documentElement.clientHeight + 'px'
        }
    }
  这样可以适配不同的手机终端
  clientHeight 元素可视区域的高度，计算公式：clientHeight = topPadding + bottomPadding + height - 水平滚动条高度
  
  offsetHeight = padding + height + border = clientHeight + 水平滚动条高度 + 边框
  
3.li标签前的圆点样式
    首先设置list-style none ---->然后li::before{ content: '●', color: red}    content里的内容随意输入。
    
    vue中的实现1.list-style none ---->  &>li                         <ul>
                                          ::before                      <li><span></span>evan</li>      //span标签放哪就会在哪里插入●
                                            content '●'                 <li><span></span>zhong</li>
                                            color red                </ul>   

4.快速修改线上的功能要用热更         git工作流

5.css   强制不换行：white-space: nowrap
        自动换行：   word-wrap:  break-word
        强制英文单词断行：  word-break:break-all
        超出显示省略号：    text-overflow:ellipsis, overflow: hidden, white-space: nowrap

6.时间选择器标签<mt-datetime-picker></mt-datetime-picker>
    <mt-datetime-picker
      ref="timePicker"              //通过this.$refs.timePicker.open()显示出来
      type="time"
      cancelText="取消"
      confirmText="确认"
      :startHour="startHour"
      :endHour="endHour"
      :value="timePicker.value || projectDetail.remind_at"
      @confirm="timePickerConfirm">
    </mt-datetime-picker>
    
7.后台通过文本编辑框输入的文本，通过后端返回给前端(手机端)接受时要用v-html，因为有可能是加粗加大的字体。

8.css的 @media 用于适配特殊的手机终端。可以放在样式的任意位置。
    @media screen and (width: 375px)    //对于屏幕宽度375px的终端采用一下样式。ps：iphone6、7的屏幕宽度为375px
        .head-content
            font-size px2rem(30)
            margin-right px2rem(30)

9.定义组件需要抽象出通用业务，如果一个组件里面的业务代码都写死了，不能被公用，那么就不算是组件。而是单纯引入的界面。

10. :active CSS伪类代表一个元素，通常用户按下鼠标时启动。:active伪类会被后续链路相关的伪类覆盖(:link、:hover、:visited)

11. vue中最常用的生命阶段：created、mounted、activated、deactivated。
    页面第一次进入：created-->mounted-->activated-->(退出时才触发)deactivated
    当页面再次进入时(前进或者后退)时，只触发activated

12. 安装vue-wechat-title依赖，可以通过meta来在路由中配置微信导航栏的标题。
    {
        path: 'list',
        name: 'Home',
        meta: {
            title: '家'
        },
        component (resolve) {
            require.ensure([], () => resolve(require('src/views/Home.vue')), 'Home')
        }
    }
    
13. 表格单元Table Cell居中，好用。

14. vue中的Date()已经格式化，可以通过Data.parse(new Date())把格式化的时间转换为时间戳。

15. vue项目中的配置文件:
        .editconfig文件帮助开发人员在不同的编辑器和IDE之间定义和维护一致的编码方式，与版本控制系统配合使用。
        
        .babelrc文件是Babel的配置文件，放在根目录。Babel是转码器，将ES6---->ES5从而在现有环境执行。
        
        .ESLint是识别ECMAScript并按规则给出报告的代码检测工具，其被设置为完全可配置，因为可以完全按照自己的规则来报告，
            .eslintrc是其配置文件（放在根目录），团队使用ESLint即同意编码规范。
            
        Svgo是一个基于Nodejs的工具，用于优化SVG矢量图形文件。

15. 设置浏览器导航栏左上角图标
    <link rel="shortcut icon" href="./static/assets/head.ico">      // 注意：要用ico文件格式的图
    
16. git MV 旧文件名.vue 新文件名.vue

17. 缓存

18. vue表格中插入图片， <template slot-scope="scope">
                            <img :src="scope.row.avator" style="width:36px height:36px">
                        </template>

19. Qs库是用来把URL中的参数转为对象，将对象转为URL参数形式。

20. 绝对定位absolute不能乱用，有时需要给父组件添加relative属性。

21. loading状态，在获取到数据前（即调用获取数据的接口前面）把loading设为true，然后显示出相应的样式、图片文字等。获取到数据后在将loading设为false，

22. 添加拦截用于防止重复点击提交。
    submit(){
        if(this.seading) {
            console.log('别急正在提交')
            return              // 这个return不止会退出if，并且退出submit。
        }
        this.seading = true
        this.submitSomething() {
            this.seading = false
        }
        
    }

23. div 一行显示，可以使用float属性或者display inline.

24. 导航守卫vue-router提供导航守卫主要用来通过跳转或取消的方式守卫导航。
    每个守卫方法接收三个参数：
        to：Route：即将要进入的目标路由
        from：Route：当前导航正要离开的路由
        next：Function：一定要调用该方法来resolve这个钩子。
        
25. Vue.nextTick([callbacj, context])
    用法： 在下次DOM更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的DOM。
    
26. router.push()的方法跳转会产生历史记录，即可以通过返回按钮回到上个页面。
    router.replace()的方法跳转不会产生历史记录，即不能通过返回按钮回到上个页面。
    
27. css滤镜filter属性提供图形特效：像模糊，锐化，元素变色。
    设置高斯模糊示例：
        .background-img
            position fixed
            top 0
            background-size cover
            filter blur(5px)
            overflow-y auto
            box-sizing border-box
            transform scale(1.1)
28. img的clip属性可以剪切图片，表示以图片左上角为原点，定义一个上，右，下，左的矩形框减除想要的大小。
    img{
        position: absolute;
        clip: rect(0px 200px 100px 0)
    }
    
29. img的alt属性可以添加图片显示失败时的提示文字，文字的样式通过img的父类定义即可。

30. 使用typeof可以判断数据类型
        let test = 'qwer'
        let test1 = 123
        console.log(typeof test1)
        console.log(typeof test)    

31. 打开指定链接window.location.href = this.url       注意这里的URL要是完整链接，即http://www.baidu.com

32. element中的table用法：如果想要对表格中的数据做操作，可以使用:formatter="formatterMethod"
    示例：
        <el-table
        :data="channelList"
        :style="{width: boxWidth}">
            <el-table-column
              label="渠道类型"
              :formatter="formatterMethod">
            </el-table-column>
        </el-table>
    methods: {
        formatterMethod (row, column) {         //  传入一行数据，然后根据其中的数据做判读，return用于显示
            if (row.channel_type === 'project') {
                return '项目渠道‘
            }
        }
    }

33. element或者iview的表格都有align样式，用于调整列对齐样式，默认为左对齐。left，center，right

34. 监听？？    vuex很好用？？

35. 按钮被点击时添加样式：
    <div class="button" @click="goTest"></div>
    <style>
        .button
            background blue
        .button: active
            bakcground red              // 当按钮被按住时变成红色
    </style>
    
36. @click.stop="methods" 用于阻止事件继续传播，主要用于内外层都有@click方法时，在内层使用stop阻止传播到外层。

37. vue中只有放在data中的属性才是响应式的，即当数据改变时，视图会重新渲染。对于存放在vuex中的则需要在vuex中更新才会重新渲染。
    如果使用了Object.freeze()，这将会组织修改现有的属性，系统无法再追踪变化。

38. :hover CSS伪类适用于用户使用指示设备虚指一个元素的情况，这个样式会被任何与链接相关的伪类重写，想:link,:visited,:active等。
    为了确保生效，:hover规则需要放在:link和:visited规则之后，但是在:actived之前。
    
39. 调用接口需要传递数组时，需要使用JSON.stringify()函数将JavaScript对象转换为json数据。这样后台才能解析该数组。
    或者把该数组转换为字符串给后台解析，this.arrayList.join()。

40. <div v-bind:style="[baseStyle, overridingStyles]"></div>
    使用数组语法可以将多个样式对象应用到同一个元素上。

41. v-if和v-show的区别：
    v-if是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。
    v-if也是惰性的：如果在初始渲染时条件为假，则什么也不做，直到条件第一次变为真时，才开始渲染条件块。
    v-show不管初始条件是什么，元素总是会被渲染，并且只是简单地基于CSS进行切换。
    一般来说，v-if有跟高的切换开销，二v-show有更高的初始渲染开销。
        注意：不推荐同时使用v-if和v-for。
        
42. 由于JavaScript的限制，Vue不能检测到一下数组的变动：
        1.当利用索引直接改变一项时， vm.items[index] = newValue
        2. 当修改数组的长度时， vm.items.length = newLength
        示例：
            new Vue({
                data: {
                    items: ['a', 'b', 'c']
                }
            )}
            this.items[1] = 'd'     //不是响应性的，即不会重新渲染，页面上的值不会发生改变;
            this.items.length = 2   //不是响应性的，即不会重新渲染，页面不会发生改变;
    为了解决第一个问题可以使用Vue.set()方法
        Vue.set(this.items, index, newValue)
    或者：this.items.splice(index, 1, newValue)
    为了解决第二个问题可以使用splice()方法
        this.items.splice(newLength)
以上通常在Vuex中使用。详细学习Vuex！！！

43. 由于JavaScript的限制，Vue不能检测对象属性的添加或删除，对于已经创建的实例，Vue不能动态添加根级别的响应式属性。但是，可以使用Vue.set(Object, key, value)方法向嵌套对象添加响应式属性
        new Vue({
            data: {
                usesrProfile: {
                    name: 'jay'
                }
            }
        )}
        使用Vue.set(this.userProfile, 'age', 22) 可以添加一个新的age属性到嵌套的UserProfile对象。
        
44. 当v-for和v-if处于统一节点时，v-for的优先级更高

45. Vue.js内建的$emit方法，是用在子组件上的，相当于传递了一个事件名或者props，在父组件上可以给这个事件名绑定上父组件的方法或者其他什么，来改变子组件的内容或状态。 
    $emit('someMethods', 666)   $eimt可以传递两个参数，第一个参数为事件名，第二个参数可以在父组件中使用$event访问到这个值。

46. stylus是更简洁的css样式，即写样式时不需要再写冒号、分号、花括号等。

47. require.ensure()配置路由实现懒加载。
    自动跳转首页的实现是通过：
        {
            path: '*',
            redirect: {name: 'HomePage'}        //即使用重定向来跳转到指定首页
        }

48. 通过设置路径别名可以简化路径的书写：在build/webpack.base.conf.js文件中的resolve---->alias中进行配置即可：
    resolve: {
        alias: {
          'vue$': 'vue/dist/vue.runtime.esm.js',
          'SRC': resolve(['src']),
          'COMPONENTS': resolve(['src', 'components']),
          'IMAGES': resolve(['src', 'assets/images']),
          'VIEWS': resolve(['src', 'views']),
          'SVG': resolve(['src', 'assets/svg'])
        }
    }
    这里只举一些例子，主要是类似IMAGE这种，多级复杂的路径，在使用时需要在前面加上'~'，譬如：
        <img src="~IMAGES/home/avator.png">     等价于  <img src="assets/images/home/avator.png">
        
50. vue子组件中props的type有String、Number、Boolean、Function、Object、Array、Symbol。

51. @param记录传递给一个函数的参数，主要用于对某个函数的参数的各项说明，包括参数名、参数数据类型、描述。

52. 页面常见高度、宽度相关计算：
        网页可见区域宽： document.body.clientWidth
        网页可见区域宽（包括边线的宽）： document.body.offsetWidth
        网页正文全文宽： document.body.scrollWidth
        
        网页可见区域高： document.body.clientHeight
        网页可见区域高（包括边线的高）：document.body.offsetHeight
        网页正文全文高： document.body.scrollHeight
        
        网页被卷去的高： document.body.scrollTop
        网页被卷去的左： document.body.scrollLeft
        
        网页正文部分上： window.screenTop
        网页正文部分左： window.screenLeft
        
        屏幕分辨率的高： window.screen.height
        屏幕分辨率的宽： window.screen.width
        
        屏幕可用工作区的高度： window.screen.availHeight
        屏幕可用工作区的宽度： window.screent.availWidth
        
52. vue监听滚动事件实现分页加载数据，首先要监听页面滚动到最下方，然后调用接口获得后续列表并且拼接在之前列表的后面，从而实现滚动分页无限加载数据。
    难点1：监听滚动。难点2：使用vuex拼接数据。
    如果是单个页面推荐使用：mounted () {window.addEventListener('scroll', this.loadMoreText)}来监听滚动，loadMoreText为自定义方法。
    在loadMoreText方法中通过：页面全文高度 - 页面被卷去高度 <= 页面可见区域高度 + 20    来判断是否滚动到了页面的底部。其中20相当于灵敏度，越小越灵敏。
    
    如果是子组件页面则需要使用。即路由使用父子路由，children路由，此种情况则需要在activated中做监听。
    activated () {
        this.$nextTick(() => {
            this.addScrollListener()
        }
    }
    methods: {
        addScrollListener () {
            this.$refs.mainBox.onscroll = function () {
                this.controlScroll(this.loadMoreText)           //  loadMoreText方法即为判断是否到达底部然后继续加载的方法。
            }
        },
        controlScroll (func, context) {
            clearTimeout(func.tId)
            func.tId = setTimeout(() => {
                func.apl(cotext)
            }， 10）
        }
53. vue提供了transition的封装组件，因此添加动画效果只需要使用transition组件即可。
    <transition name="fade">       //通过name在样式中添加相应的动画。
        <div>something</div>
    </transition>
    
54. 给标签加上title即可添加鼠标悬停给出提示信息。

55. v-show和v-if的坑：如果一个列表滚动分页加载，如果这个列表为空就不显示，这时如果使用v-if就会出现该列表的一些滚动属性underfined，因为v-if如果条件为假是完全不渲染的，而这里使用v-show就
    可以完美解决underfined。

56. 图片居中
        display block           将图片设置为block独占一行，然后margin auto来实现居中
        margin-left auto
        margin-right auto
        
57. 静态活动页面：通过npm run server跑起来，想要调用测试服或者正式服的接口需要在链接后面加上token即授权。
		localhost:1000/myPage/?__token=相应的token。

58.	Axios使用方法：
			1）安装：npm install axios
			2）执行get请求
						axios.get('/user?id=12345')				//id固定时可以直接这样传参
							.then(function (response) {
								console.log(response)
							)}
							.catch(function (error) {
								console.log(error)
							)}
					传参的另外一种写法：
						axios.get('/user', {
							params: {
								id: 12345
							}
							)}
							.then(function (response) {
								console.log(response);
							)}
							.catch(function (error) {
								console.log(error);
							)}

				3）执行post请求：
							axios.post('/user', {
									firseName: 'jay',
									lastName: 'zhou'
								)}
								.then(function (response) {
									console.log(response);
								)}
								.catch(function (error) {
									console.log(error)
								)}
								
    
    
 59.	git的一些命令：
			git checkout -b branchA			//创建新的分支
			git checkout master					//切换分支
			git pull										//拉去远程最新代码
			git add .									//提交改动到中间仓库
			git push origin branchname		//把改动推到远端
			git rebase master						//把master合并到本地本地分支
			然后再到gitHub上完成合并。
            
            合并流程
                git add .
                git commit -m "修改了一些"
                git push origin branchName
                git checkout master
                git pull
                git checkout branchName
                git pull
                git rebase master
                git merge master
                git push -f         
                再到gitlab上请求合并。
			
60.	HTML中引入.js文件或者引入.css文件可以在后面加上?v=1	数字随意写，这样可以手动清除缓存。
			示例：<script data-main="./qrCode.js?v=3" src="../js/lib/require.js"></script>
						<link rel="stylesheet" href="./index.css?v=0"/>
						
61.	?的用法： userName?: this.data.user_name			加个问号表示如果存在就是该值，如果不存在就是undefined

62.	react中不能使用返回false的方式阻止默认行为，必须明确的使用preventDefault
		<a href="#" onclick="console.log('the link was clicked'); return false">
			click me
		</a>		//HTML写法
		
		//	react 写法
		function ActionLink() {
			function handleClick(e) {
				e.preventDefault();
				console.log('the link was click');
			}
		
		
			return (
				<a href="#" onclick={handleClick}>
					click me
				</a>
		}	
		
63.	HTML中meta头部清除缓存的写法：
		//	禁止浏览器从本地机的缓存中调阅页面内容，这样访问者将无法脱机浏览
		<meta http-equiv="Pragma" content="no-cache">		
		//	元缓存控制标记允许Web发布者定义缓存应如何处理页面，允许的值：public，private，no-Cache，no-Store。	
		<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
		//	制定网页缓存中的过期时间，一旦网页过期，必须到服务器上重新调阅，
			content中的时间格式必须使用GMT的时间格式，或者直接设置为0
		<meta http-equiv="Expires" content="0">
	
64.  isNan()方法用于判断一个变量是不是数字。不是数字时为真，is not a number.

65. ‘...’     三个点表示对象展开运算符
    
66.	css更换img图片src的方式：
			<img class="my-img"/>
			.my-img{
				content: src('./assets/avatar.png');
			}
			
67.	css样式：cursor: pointer;			//	鼠标悬浮时变成手的形状。

68.	type :quit<Enter> to quit VIM
		git出现这种问题时：使用Esc进入正常模式，然后输入：	注意冒号也要输入。		
						一般常用	:wq	即可退出该模式，然后继续执行git命令。
		:q 退出（简称:quit）
		:q!退出而不保存（简称:quit!）
		:wq 写作和退出
		:wq! 写入和退出即使文件只有读权限（如果文件没有写权限：强制写入）
		:x 写和退出（类似于:wq，但只有在有变化时才写）
		:exit写和退出（同:x）
		:qa全部退出（简称:quitall）
		:cq 退出而不保存并使Vim返回非零错误（即退出并显示错误）
		
69.	页面接口调试时，勾选preserve log可以一直保留接口调用历史。
		例如：如果调一个接口后，会刷新页面，勾选该选项后，页面刷新，调用的接口记录仍然存在。
		
70.	js的map()方法创建一个新数组，其结果是在调用数组中的每个元素上调用提供的函数。
		示例：	var array1 = [1, 2, 3, 4]
					const map1 = array1.map(x => x * 2)
					console.log(map1)				//	打印结果为[2, 4, 6, 8]

71.	箭头函数基本语法：
			(参数1，参数2，...，参数n) => { 函数声明 }
			(参数1，参数2，...，参数n) => 表达式（单一）
			//	当只有一个参数时，圆括号是可选的
			(单一参数) => { 函数声明 }
			单一参数 => { 函数声明 }
			//	没有参数的函数应该有一对圆括号
			() => { 函数声明 }
   
72.	列表中的最后一个元素可以使用last-child属性为其添加独立样式。
			示例：	
					.ProjectList {
						background: pink;
					}
					.ProjectList: last-child {		//	为list最后一个元素添加独立样式；
						background: red;
					}
					
73.	过滤手机号的方法
			
			content = content.replace(/1[3,4,5,7,8]{1}[0-9]{9}/gi, function (s) {
				return new Array(s.length).join('*');
			  });
			  return content;
			  
74.	js时间戳格式化方法：	传一个type
		export function TimeStream(timestamp: number, type?: string) {
		  const date: Date = new Date(timestamp * 1000)
		  const Y = date.getFullYear()
		  const M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1)
		  const D = date.getDate() < 10 ? '0' + date.getDate() : date.getDate()
		  const h = date.getHours() < 10 ? '0' + date.getHours() : date.getHours()
		  const m = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()
		  const s = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds()
		  const nowTime: Date = new Date()
		  const timeToString = nowTime.toString()
		  switch (type) {
			case 'YM': // 年-月
			  return Y + '-' + M
			case 'MD': // 月-日
			  return M + '-' + D
			case 'MD_HM': // 月-日
			  return M + '-' + D + ' ' + h + ':' + m
			case 'YMD_HMS': // 月-日 时：分：秒
			  return Y + '-' + M + '-' + D + ' ' + h + ':' + m + ':' + s
			case 'CN_YMD': // x年x月x日
			  return Y + '年' + M + '月' + D + '日'
			case 'CN_YMD_HM': // x年x月x日
			  return Y + '年' + M + '月' + D + '日' + ' ' + h + ':' + m
			case 'CN_MD_HM': // x月x日
			  return M + '月' + D + '日' + ' ' + h + ':' + m
			case 'hm': // 时:分
			  return h + ':' + m
			case '-D': // 天数差
			  return Math.floor(((timestamp * 1000) - Date.parse(timeToString)) / 1000 / 3600 / 24)
			case '-H': // 小时差
			  return Math.ceil((timestamp * 1000 - Date.parse(timeToString)) / 1000 / 3600)
			default: // 年-月-日 时:分
			  return Y + '-' + M
		  }
		}

75.	把本地分支的修改推到远端分支：git push -f origin branchname

76. 	react要使用userState()、userEffect()、userContext()这三个API，在声明函数组件时，需要使用withHooks()将函数封装。
		示例：	注意：一个文件中只能有一个return
			export const ConfirmButton = withHooks(function ConfirmButton() {
				const [isShowButton, setIsShowButton] = useState(false)
				if (isShowButton) {
					return (
						<div className={'Button-Container'}>
							确定
						</div>
					）
				}
			}
			
77.	@media (min-height: 810px) {
				用于给iphoneX这种长手机专门做样式适配。
		}
		
78.	location.protocol	设置或返回当前URL的协议

79.	location.hostname		设置或返回当前URL的主机名。

80.	返回当前时间戳 new Date().getTime() 返回的当前时间的毫秒数，
		（new Date().getTime())	/	1000		返回秒数
		
81.	withHooksAPI的useEffect中要有clear操作，useEffect中传递的第二个参数时一个数组，表示这个函数的依赖，当且仅当依赖发生改变是
		才会进入useEffect并执行其中的代码。
			该函数有三种情况：
				1. useEffect(() => {}, [])	当传入一个空数组时，该方法里面内容只会在加载时执行一次。
				2. useEffect(() => {})		当什么都不传入时，每次页面内有数据改动时就会进入该方法执行一次。
				3. useEffect(() => {}, [userId, lectureId])	当传入内容发生改变时，即userId或lectureId发生改变时就会执行该方法。
				
82.	判断终端是不是电脑的函数
			function isPC() {
				if (navigator.userAgent.match(/(iPhone|iPod|Android|ios)/i)) {
					return false
				} else {
					return true
				}
			}
		同样可以使用类似方法判断终端是不是ios、安卓等等。
		
83.	拼接符	``	不只是URL，调用api可以使用拼接符号。className，path路径都可以采用拼接的方式。
			className拼接举例：	className={'confirmButton${selectType === 'free' ? '-select' : ''}`}
									当selectType === 'free' 时，className为confirmButton-select	否则为confirmButton
									
84.	创建一个react项目
			npx create-react-app app-name				//	项目名不能使用驼峰方式命名
			
85.	按需加载可以提升项目性能从而优化项目。

86.	react项目中json文件不能加注释的解决办法：	
		点击右下角的JSON，然后点击弹窗中的Configure File Association for '.json'--->
		在新的窗口中输入jsonc--->点击JSON with Comments Current Association	然后就可以在该文件中添加注释了。
		
87.	git放弃修改或者放弃增加文件：
			放弃修改的文件（没有add到缓存区的）
				单个文件/文件夹：	git checkout -- filename
				所有文件/文件夹：	git checkout .
			
			放弃本地新增的文件（没有add到缓存区）
				单个文件/文件夹：	rm filename	/	rm dir -rf
				所有文件/文件夹：	git clean -xdf
				
			放弃修改/新增的文件，已经add到缓存区：
				单个文件/文件夹：	git reset HEAD filename
				所有文件/文件夹：	git reset HEAD
				
			git add  git commit 提交后，撤销本次提交：
				//	commit_id是要回到的那个节点，可以通过git log查看，可以只选前6位，撤销之后，已经commit的修改还在工作区。
				git reset commit_id		
				
				//	commit_id是要回到的那个节点，可以通过git log查看，可以只选前6位，撤销之后，已经commit的修改将会清除。
				git reset --hard commit_id
				
88.	react项目路由跳转是通过react-router-dom的插件，
			//	电脑端用法示例：
			<div>
			  <BrowserRouter>
				<Switch>
				  <Route path="/PopupController" component={PopupController} />
				  <Route path="/SharedRevenue" component={SharedRevenue}/>
				</Switch>
			  </BrowserRouter>
			</div>
			
			//	微信端用法示例：
			<Router history={browserHistory}>
				<Route path="/" component={Root}>
					<IndexRoute component={MainPage}/>

					<Route path='/account/' component={AccountPage}/>
					<Route path='/account/bought' component={BoughtPage}/>
					<Route path='/account/bought/evaluation/:target_id' component={Evaluation}/>
					<Route path='/account/coupons' component={MyCouponListPage} />
					<Route path='/account/favourites' component={FavouriteRecordPage} />
				</Route>
			</Router>
			
89.	
			
			











  
  
  
  
    